//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas
{
    public static class BlueprintPoolExtension
    {
        public static Entity CreateEntity(this Pool pool, Blueprints.IBlueprint blueprint)
        {
            var entity = pool.CreateEntity();

            foreach (var componentTypeName in blueprint.ComponentTypes)
            {
                var componentId = ComponentNameToId[componentTypeName];

                switch (componentId)
                {
                   case ComponentIds.Movable:
                        entity.IsMovable(true);
                        break;
                   case ComponentIds.Position:
                        entity.AddPosition(blueprint.PropertyValues);
                        break;
                   case ComponentIds.Destroy:
                        entity.IsDestroy(true);
                        break;
                   case ComponentIds.GameBoardCache:
                        entity.AddGameBoardCache(blueprint.PropertyValues);
                        break;
                   case ComponentIds.GameBoard:
                        entity.AddGameBoard(blueprint.PropertyValues);
                        break;
                   case ComponentIds.GameBoardElement:
                        entity.IsGameBoardElement(true);
                        break;
                   case ComponentIds.Input:
                        entity.AddInput(blueprint.PropertyValues);
                        break;
                   case ComponentIds.Interactive:
                        entity.IsInteractive(true);
                        break;
                   case ComponentIds.Resource:
                        entity.AddResource(blueprint.PropertyValues);
                        break;
                   case ComponentIds.View:
                        entity.AddView(blueprint.PropertyValues);
                        break;
                   case ComponentIds.Score:
                        entity.AddScore(blueprint.PropertyValues);
                        break;

                }
            }

            return entity;
        }

        private static readonly System.Collections.Generic.Dictionary<string, int> ComponentNameToId = new System.Collections.Generic.Dictionary<string, int>
        {
            { "Movable", ComponentIds.Movable },
            { "Position", ComponentIds.Position },
            { "Destroy", ComponentIds.Destroy },
            { "GameBoardCache", ComponentIds.GameBoardCache },
            { "GameBoard", ComponentIds.GameBoard },
            { "GameBoardElement", ComponentIds.GameBoardElement },
            { "Input", ComponentIds.Input },
            { "Interactive", ComponentIds.Interactive },
            { "Resource", ComponentIds.Resource },
            { "View", ComponentIds.View },
            { "Score", ComponentIds.Score },

        };
    }
}
